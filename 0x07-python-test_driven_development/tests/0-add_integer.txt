The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Importing method:
        >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

Test for positive integers parameters.

        >>> add_integer(13, 7)
        20
        >>> add_integer(10000000000000000000000000000000000000000, 1)
        10000000000000000000000000000000000000001
        >>> add_integer(15, 3)
        18


Test for negative integers parameters.

        >>> add_integer(1, -15)
        -14
        >>> add_integer(-8, -19)
        -27
        >>> add_integer(-3, 2)
        -1


Test for positive float parameters.

        >>> add_integer(1.2, 2.8)
        3
        >>> add_integer(1024, 56.7)
        1080
        >>> add_integer(12.8, 33)
        45



Test for negative float parameters.

        >>> add_integer(-2.4, -6.1)
        -8
        >>> add_integer(-1.2, 12)
        11
        >>> add_integer(9, -13.3)
        -4


Test for just one parameters.

        >>> add_integer(50)
        148
        >>> add_integer(2.99)
        100
        >>> add_integer(-2)
        96

Test for more than two parameters passed.

        >>> add_integer(1, 2, 3)
        Traceback (most recent call last):
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test for none int or float.

        >>> add_integer(1, "str")
        Traceback (most recent call last):
        TypeError: b must be an integer

        >>> add_integer(5, "29")
        Traceback (most recent call last):
        TypeError: b must be an integer

        >>> add_integer()
        Traceback (most recent call last):
        TypeError: add_integer() missing 1 required positional argument: 'a'

        >>> add_integer("Holberton", "School")
        Traceback (most recent call last):
        TypeError: a must be an integer

        >>> add_integer(1, [1, 2, 3])
        Traceback (most recent call last):
        TypeError: b must be an integer

        >>> add_integer([3, 4, 2], 1)
        Traceback (most recent call last):
        TypeError: a must be an integer

        >>> add_integer(1, int("String"))
        Traceback (most recent call last):
        ValueError: invalid literal for int() with base 10: 'String'

        >>> add_integer(int("String"), 1)
        Traceback (most recent call last):
        ValueError: invalid literal for int() with base 10: 'String'

        >>> add_integer(5, float("String"))
        Traceback (most recent call last):
        ValueError: could not convert string to float: 'String'

        >>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

        >>> add_integer(a)
        Traceback (most recent call last):
        NameError: name 'a' is not defined

        >>> add_integer(float('inf'), 2)
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

        >>> add_integer(float("Nan"))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
